#!/usr/bin/env Rscript

options(stringsAsFactors=FALSE)

#######################
## Collect arguments ##
#######################
args <- commandArgs(TRUE)

## Default setting when no arguments passed
if(length(args) < 1) {
    args <- c("--help")
}

print.help <- function() {
    cat("
          The R Script
     
          Arguments:
          --chr=chr                - numeric. Chromosome
          --snpid=snpid            - string. SNP id
          --outdir=outdir          - string. outdir
          --bgen_dir=bgen_id       - string. Directory where to find UKBB BGEN files
          --qctool=qctool          - string. Path to qctool
          --help                   - print this text
          
     
          \n\n")
    
    q(save="no")
    
}

## Help section
if("--help" %in% args) {
    print.help()
}
     
## Parse arguments (we expect the form --arg=value)
parseArgs <- function(x) strsplit(sub("^--", "", x), "=")
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)))
argsL <- as.list(as.character(argsDF$V2))
names(argsL) <- argsDF$V1

## Check non-default arguments are parsed
if(is.null(argsL$chr)) {
    print.help()
    stop("chromosome id is missing\n")
} else {
    chr <- argsL$chr
}

if(is.null(argsL$snpid)) {
    print.help()
    stop("SNP id is missing\n")
} else {
    snp <- argsL$snpid
}


## Check other arguments and set to default if missing
if(is.null(argsL$bgen_dir)) {
    bgen_dir <- ""
} else {
    bgen_dir <- argsL$bgen_dir
}

if(is.null(argsL$qctool)) {
    qctool <- ""
} else {
    qctool <- argsL$qctool
}

if(is.null(argsL$outdir)) {
    outdir <- ""
} else {
    outdir <- argsL$outdir
}


## snp <- 'rs1510226'
## chr <- 6
## bgen.dir <- "/well/mcvean/uk_biobank/genetic_data"
## qctool <- "/apps/well/qctool/1.5/qctool"


######################
## Useful functions ##
######################

genline2dosage <- function(line,ind.offset=0) {

    fields = strsplit(line,split=' ')[[1]]
    snp  = fields[2+ind.offset]
    pos  = as.numeric(fields[3+ind.offset])
    a1   = fields[4+ind.offset]
    a2   = fields[5+ind.offset]
    idx.seq = seq(6+ind.offset,length(fields),by=3)
    dosage =  0*as.numeric(fields[idx.seq]) + 1*as.numeric(fields[idx.seq+1]) + 2*as.numeric(fields[idx.seq+2])
    maf = sum(dosage,na.rm=T)/(2*length(dosage[!is.na(dosage)]))
    if( maf > .5 ) {
        dosage =  2*as.numeric(fields[idx.seq]) + 1*as.numeric(fields[idx.seq+1]) + 0*as.numeric(fields[idx.seq+2])
        maf = sum(dosage)/(2*length(dosage))
        a1 = fields[5]
        a2 = fields[4]
    }

    out = list(
        DOSAGE = dosage,
        SNP    = snp,
        POS    = pos,
        A1     = a1,
        A2     = a2,
        MAF    = maf
    )

    return(out)
}

read.sample.file <- function(file) {

    header <- readLines(file,n=2)

    col.names <- strsplit(header,split=' ')[[1]]
    var.types <- strsplit(header,split=' ')[[2]]
    
    col.class <- rep(NA,length(var.types))
    col.class[1:3] <- c("character","character","numeric")

    are.cov <- rep(FALSE,length(var.types))
    
    col.class[var.types %in% "P"] <- 'numeric'
    col.class[var.types %in% "D"] <- 'factor'
    col.class[var.types %in% "C"] <- 'numeric'
    col.class[var.types %in% "B"] <- 'factor'

    are.cov[var.types %in% c("D","C")] <- TRUE
    col.names[are.cov] = paste("COV_",col.names[are.cov],sep='')
    
    s <- read.table(file,skip=2,colClasses=col.class)
    
    colnames(s) <- col.names
    
    return(s)
}

bgen.file <- paste(bgen_dir,"/chr",chr,"impv1.bgen",sep='')
sample.file <- paste(bgen_dir,"/impv1.sample",sep='')

snp.gen.file <- paste(outdir,"/",snp,".gen",sep='')

cmd <- paste(
    qctool," ",
    "-filetype bgen ",
    "-g ",bgen.file," ",
    "-s ",sample.file," ",
    "-incl-snps-matching ",snp," ",
    "-og ",snp.gen.file," ",
    "-os ",outdir,"/",snp,".sample",
    sep='')

system(cmd)


s <- read.sample.file(sample.file)
dosage <- genline2dosage(readLines(snp.gen.file),ind.offset=1)

s$DOSAGE <- round(dosage$DOSAGE)

o <- s[,c(1,4)]
colnames(o) <- c("ID","Gen")
outfile <- paste(outdir,"/",snp,".dose",sep='')

write.table(
    o,
    outfile,
    row.names=F,col.names=T,
    sep=" ",quote=F)
